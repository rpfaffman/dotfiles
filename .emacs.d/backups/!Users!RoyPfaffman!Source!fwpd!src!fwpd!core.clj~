(ns fwpd.core)

(def filename "suspects.csv")

(slurp filename)

(def vamp-keys [:name :glitter-index])

(defn str->int
  [str]
  (Integer. str))

(def conversions
  {:name identity
   :glitter-index str->int})

(defn convert
  [vamp-key value]
  ((get conversions vamp-key) value))

(defn parse
  "Convert a CSV into rows of columns"
  [string]
  (map #(clojure.string/split % #",")
       (clojure.string/split string #"\n")))

(defn mapify-simple
  "Return a seq of maps like {:name \"Edward Cullen\" :glitter-index 10}"
  [rows]
  (map (fn [[name glitter-index]]
         {:name name :glitter-index glitter-index})
       rows))

(defn mapify
  "Return a seq of maps like {:name \"Edward Cullen\" :glitter-index 10}"
  [rows]
  (map (fn [row]
         (reduce (fn [row-map [vamp-key value]]
                   (assoc row-map vamp-key (convert vamp-key value)))
                 {}
                 (map vector vamp-keys row)))
       rows))

(mapify (parse (slurp filename)))

; create the glitter-filter function that returns only those maps with that meet the min glitter index
(defn glitter-filter
  [min-glitter records]
  (filter #(>= (:glitter-index %) min-glitter) records))

(let [min-glitter 4
      records (mapify (parse (slurp filename)))]
  (glitter-filter min-glitter records))

; EXERCISES
; Turn the result of your glitter filter into a list of names.
(map :name (let [min-glitter 4
             records (mapify (parse (slurp filename)))]
         (glitter-filter min-glitter records)))

; Write a function, append, which will append a new suspect to your list of suspects.
(def suspects
  (map :name (let [min-glitter 4
         records (mapify (parse (slurp filename)))]
     (glitter-filter min-glitter records))))
suspects
(defn append
  [suspect]
  (cons suspect suspects))
(append "Johnny")

; Write a function, validate, which will check that :name and :glitter-index are present when you append. The validate function should accept two arguments: a map of keywords to validating functions, similar to conversions, and the record to be validated.
(def validations
  {:name #(and (not (empty? %)) (string? %))
   :glitter-index #(number? %)})
(defn validate
  [keyword-validations record]
  (every? identity (map (fn [[keyword validation]]
                          (validation (keyword record)))
                        validations)))
(validate validations {:name "Bob Joe" :glitter-index 10})


; Write a function that will take your list of maps and convert it back to a CSV string. Youâ€™ll need to use the clojure.string/join function.
(def suspect-map (mapify (parse (slurp filename))))
suspect-map
(defn map-to-csv
  [map-collection]
  map-collection)

(map-to-csv suspect-map)

