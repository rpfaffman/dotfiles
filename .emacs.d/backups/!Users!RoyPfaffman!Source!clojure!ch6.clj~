; A symbol is associated with a var which is associated with an address. The address points to a shelf with an item on it.
(def great-books ["East of Eden", "The Glass Bead Game"])

(ns-interns *ns*)
(get (ns-interns *ns*) 'great-books)

(ns-map *ns*)

; Retrieve values associated with symbols
(deref #'user/great-books)
great-books

; You can overwrite symbols:
(def great-books ["The Power of Bees", "Journey to Upstairs"])
great-books

; We use namespacing to prevent collisions with symbols. Here are your tools:
;  create-ns (create a namespace, in-ns, ns (a macro that combines a lot of these fns)
;  ns-name (name of a namespace)

; CREATE-NS takes a symbol and creates a namespace associated with that name
(create-ns 'cheese.taxonomy)

; IN-NS switches the current namespace. If the namespace doesn't exist, it creates a new one
(in-ns 'cheese.analysis)

; You can also call symbols/vars from other namespaces using the fully qualified symbol:
(in-ns 'cheese.taxonomy)
(def cheddars ["mild", "medium", "strong", "sharp", "extra sharp"])
(in-ns 'cheese.analysis)
cheese.taxonomy/cheddars ; returns value

; REFER and ALIAS
; refer gives you more control over how you use variables in other namespaces

(in-ns 'cheese.taxonomy)
(def cheddars ["mild" "medium" "strong" "sharp" "extra sharp"])
(def bries ["Wisconsin" "Somerset" "Brie de Meaux" "Brie de Melun"])
(in-ns 'cheese.analysis)
(clojure.core/refer 'cheese.taxonomy)
cheddars ; returns value from cheese.taxonomy namespace
bries ; returns value from cheese.taxonomy namespace

; the refers function can also except :only, :except, and :rename arguments to selectively
; bring in or exclude functions from another namespace.

; PRIVATE FUNCTIONS - sometimes you want functions to only be available to those in
; the same namespace. This is similar to a private interface. You can use the "defn-"
; keyword for this.

(clojure.core/defn- private-function
  []
  "yo, this is a private function")

; ALIAS allows you to refer to another namespace with a different name, making it more
; convenient to invoke functions from that namespace.
(clojure.core/alias 'taxonomy 'cheese.taxonomy)
taxonomy/cheddars ; returns an array of types of cheddar

