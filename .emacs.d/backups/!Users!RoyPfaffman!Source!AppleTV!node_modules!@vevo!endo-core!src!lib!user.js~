import Promise
// User class
import storage from "./storage.js"; //Singleton

let generateUUID = () => {
  var d = new Date().getTime();

  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = (d + Math.random()*16)%16 | 0;
    d = Math.floor(d/16);
    return (c=='x' ? r : (r&0x3|0x8)).toString(16);
  });

  return uuid;
}


class User {
  constructor() {
    this.tempAnonId = generateUUID();

    let anonymize = function(ids) {
      if (ids.anon_id) return;

      this.setAnonId(this.tempAnonId).catch(err => console.error(err));
    };

    this.getIds()
      .then(anonymize.bind(this))
      .catch(err => console.error(err));
  }

  getIds() {
    return Promise.all([this.getUserId(), this.getAnonId()])
      .then(ids => ({user_id: ids[0], anon_id: ids[1]}))
  }

  logout() {
    return storage.remove('legacy_user_id');
  }

  getUserId() {
    return storage.load('legacy_user_id')
      .then(userId => userId || null);
  }

  setUserId(id) {
    return storage.save('legacy_user_id', id)
  }

  setAnonId(id) {
    return storage.save('endo_anon_id', id);
  }

  getAnonId() {
    let tempAnonId = this.tempAnonId;
    return storage.load('endo_anon_id')
      .then(anon_id => anon_id ? anon_id : tempAnonId);
  }

  static generateUUID () {
    return generateUUID()
  }
}

export default new User();
