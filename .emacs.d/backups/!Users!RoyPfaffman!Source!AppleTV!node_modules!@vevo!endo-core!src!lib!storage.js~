'use strict';

import Promise

let exportStorage = () => {
  let react;

  try {
    react = require('react-native');
  } catch (err) {
    console.log('No react native found, falling back to local storage');
    react = false;
  }

  if(react && react.AsyncStorage) {
    let rstore = react.AsyncStorage;

    return {
      save: (key, data) => rstore.setItem(key, data),
      load: key => rstore.getItem(key),
      remove: key => rstore.removeItem(key)
    }
  } else {
    let store;

    if (typeof window === 'object' && window.localStorage) {
      store = window.localStorage;
    } else {
      store = {
        mem: {},
        setItem: function(key, data) {
          this.mem[key] = data;
          return new Promise(res => res(data));
        },
        getItem: function(key) {
          return new Promise(res => res(this.mem[key]))
        },
        removeItem: function(key) {
          delete this.mem[key];
          return new Promise(res => res(true));
        }
      };
    }

    return {
      save: (key, data) => new Promise(res => res(store.setItem(key, data))),
      load: key => new Promise(res => res(store.getItem(key))),
      remove: key => new Promise(res => res(store.removeItem(key)))
    };
  }
};


export default exportStorage();
